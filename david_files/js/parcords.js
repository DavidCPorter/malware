// linear color scale
var blue_to_brown = d3.scale.linear()
  .domain([0, 5000])
  .range(["steelblue", "brown"])
  .interpolate(d3.interpolateLab);

// interact with this variable from a javascript console
var pc;
var thread_ints = [];

// load csv file and create the chart
d3.csv('data/thread_sta_out.csv', function(data) {

  var colorgen = d3.scale.ordinal()
  .range(["#a6cee3","#1f78b4","#b2df8a","#33a02c",
          "#fb9a99","#e31a1c","#fdbf6f","#ff7f00",
          "#cab2d6","#6a3d9a","#ffff99","#b15928"]);

  var color = function(d) { return colorgen(d.malware_type); };

  var dimensions = {
	"duration":
		{
      orient: 'right',
			type: 'string',
			tickPadding: 0,
			innerTickSize: 8,
			ticks: 8
		}};

  pc = d3.parcoords()("#parcoord_id")
    .data(data)
    .hideAxis(["last_time"])
    .color(color)  // categorical color scale
    .alpha(0.2)
    .render()
    .brushMode("1D-axes")  // enable brushing
    .interactive()  // command line mode

  var explore_count = 0;
  var exploring = {};
  var explore_start = false;
  pc.svg
    .selectAll(".dimension")
    .style("cursor", "pointer")
    .on("click", function(d) {
      exploring[d] = d in exploring ? false : true;
      event.preventDefault();
      if (exploring[d]) d3.timer(explore(d,explore_count));
    });
  pc.svg
    .selectAll(".dimension")
    .filter(function(d) { return d == "duration" || d == "initial_time" })
    .selectAll(".tick text")
    .remove();

  function explore(dimension,count) {
    if (!explore_start) {
      explore_start = true;
      d3.timer(pc.brush);
    }
    var speed = (Math.round(Math.random()) ? 1 : -1) * (Math.random()+0.5);
    return function(t) {
      if (!exploring[dimension]) return true;
      var domain = pc.yscale[dimension].domain();
      var width = (domain[1] - domain[0])/4;

      var center = width*1.5*(1+Math.sin(speed*t/1200)) + domain[0];

      pc.yscale[dimension].brush.extent([
        d3.max([center-width*0.01, domain[0]-width/400]),
        d3.min([center+width*1.01, domain[1]+width/100])
      ])(pc.g()
          .filter(function(d) {
            return d == dimension;
          })
      );
    };
  };

  // create data table, row hover highlighting
var grid = d3.divgrid();
d3.select("#grid")
  .datum(data.slice(0,100))
  .call(grid)
  .selectAll(".row")
  .on({
    "mouseover": function(d) { pc.highlight([d]) },
    "mouseout": pc.unhighlight
  });

// update data table on brush event
pc.on("brush", function(d) {
  d3.select("#grid")
    .datum(d.slice(0,100))
    .call(grid)
    .selectAll(".row")
    .on({
      "mouseover": function(d) { pc.highlight([d]) },
      "mouseout": pc.unhighlight
    });
});

});
