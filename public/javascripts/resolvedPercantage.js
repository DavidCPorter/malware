function drawresolved(data, startDate, endDate) {


    data = data.filter(row => {
        let date = new Date(row.initial_time);
        return date >= startDate && date <= endDate;
    });

    var total_threads = data.length;
    var resolved_threads = data.filter(row => row.if_resolved === 'y').length;


    var width = 135,
        height = 125,
        twoPi = 2 * Math.PI,
        progress = 0,
        allocated = resolved_threads,
        total = total_threads,
        formatPercent = d3.format(".0%");

    var arc = d3.arc()
        .startAngle(0)
        .innerRadius(58)
        .outerRadius(66);

    d3.select("#resolvedPercentage").html("");

    var svg = d3.select("#resolvedPercentage")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

    var meter = svg.append("g")
        .attr("class", "funds-allocated-meter");

    meter.append("path")
        .attr("class", "background")
        .attr("d", arc.endAngle(twoPi));

    var foreground = meter.append("path")
        .attr("class", "foreground");

    var percentComplete = meter.append("text")
        .attr("text-anchor", "middle")
        .attr("class", "percent-complete")
        .attr("dy", "0em");

    var description = meter.append("text")
        .attr("text-anchor", "middle")
        .attr("class", "description")
        .attr("dy", "2.3em")
        .text("Malware Resolved");

    var i = d3.interpolate(progress, allocated / total);

    d3.transition().duration(1000).tween("progress", function () {
        return function (t) {
            progress = i(t);
            foreground.attr("d", arc.endAngle(twoPi * progress));
            percentComplete.text(formatPercent(progress));
        };
    });
}