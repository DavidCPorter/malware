function linechart(data, startDate, endDate) {

    startDate = new Date(startDate.toDateString());
    endDate = new Date(endDate.toDateString());

    d3version4.select("#resolved_line_chart").html("");

    let threads = data.filter(row => {
        let date = new Date(row.initial_time);
        return date >= startDate && date <= endDate;
    });

    let resolved_map =  threads.filter(row => row.if_resolved === 'y').map(row => new Date(row.initial_time).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
    let unresolved_map =  threads.filter(row => row.if_resolved !== 'y').map(row => new Date(row.initial_time).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());

    let date_keys = [...new Set([...resolved_map.keys() ,...unresolved_map.keys()])];

    // set the dimensions and margins of the graph
    const margin = 10;
// const height = d3version4.select('#scene').node().clientHeight - 2 * margin;
    const height = 400 - 2 * margin;
    const width = d3version4.select('.resolved_line_chart').node().clientWidth - 2 * margin;

// parse the date / time // example date - Tue May 18 2004
    var parseTime = d3version4.timeParse("%a %b %d %Y");

// set the ranges
    var x = d3version4.scaleTime().range([0, width]);
    var y = d3version4.scaleLinear().range([height, 0]);

// define the 1st line
    var valueline = d3version4.line()
        .x(function(d) { return x(parseTime(d)); })
        .y(function(d) { return y( ); });

// define the 2nd line
    var valueline2 = d3version4.line()
        .x(function(d) { return x(parseTime(d)); })
        .y(function(d) { return y(unresolved_map.has(d) ? unresolved_map.get(d): 0 );});
// append the svg obgect to the body of the page
// appends a 'group' element to 'svg'
// moves the 'group' element to the top left margin

    var svg = d3version4.select("#resolved_line_chart")
        .attr("width", width)
        .attr("height", height)
        .append("g")
        .attr('transform', `translate(${margin}, ${margin})`);


        // Scale the range of the data
    let extent = d3version4.extent(date_keys, function(d) { return parseTime(d); });
    console.log(extent);
    x.domain(extent);
        y.domain([0, d3version4.max(date_keys, function(d) {
            return Math.max(resolved_map.has(d) ? resolved_map.get(d): 0., unresolved_map.has(d) ? unresolved_map.get(d): 0); })]);

        // Add the valueline path.
        svg.append("path")
            .data([date_keys])
            .attr("class", "line")
            .attr("data-legend",function(d) { return "Asd"})
            .attr("d", valueline);

        // Add the valueline2 path.
        svg.append("path")
            .data([date_keys])
            .attr("class", "line")
            .style("stroke", "red")
            .attr("d", valueline2)
            .attr("data-legend", function(d) { return "asxs"});


    // Add the X Axis
        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3version4.axisBottom(x));

        // Add the Y Axis
        svg.append("g")
            .call(d3version4.axisLeft(y));


    // legend = svg.append("g")
    //     .attr("class","legend")
    //     .attr("transform","translate(50,30)")
    //     .style("font-size","12px")
    //     .call(d3version4.legend)

}