function linechart(data, startDate, endDate) {

    let tick_count = 50;
    let one_day = 1000 * 3600 * 24;
    let genesis = new Date('1970-01-01');

    startDate = new Date(startDate.toDateString());
    endDate = new Date(endDate.toDateString());

    let threads = data.filter(row => {
        let date = new Date(row.initial_time);
        return date >= startDate && date <= endDate;
    });

    let no_of_days = (endDate - startDate) / (one_day);
    let step = Math.ceil(no_of_days / tick_count);

    let finalDates = [genesis];
    let current_date = new Date(startDate);
    while (current_date < endDate) {
        finalDates = finalDates.concat(new Date(current_date));
        current_date.setDate(current_date.getDate() + step)
    }
    finalDates = finalDates.concat(endDate);
    let dateCache = 1;
    function    attachDate(date, retry = true) {
        while (finalDates[dateCache]) {
            if (finalDates[dateCache - 1] < date && finalDates[dateCache] >= date) return finalDates[dateCache];
            dateCache ++;
        }
        console.log("unexpected date " + date + "start_date  " + startDate + " end date " + endDate);
        dateCache = 1;
        if(retry) return attachDate(date, false)
    }

    let resolved_map =  threads.filter(row => row.if_resolved === 'y').map(row => attachDate(new Date(row.initial_time)).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
    let unresolved_map =  threads.filter(row => row.if_resolved !== 'y').map(row => attachDate(new Date(row.initial_time)).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());



    let date_keys = [...new Set([...resolved_map.keys() ,...unresolved_map.keys()])];
    date_keys.forEach(key => {
        if (!resolved_map.has(key)) resolved_map.set(key, 0);
        if (!unresolved_map.has(key)) unresolved_map.set(key, 0);
    });

    var parseDate = d3version3.time.format("%a %b %d %Y");
    let unresolved_key = 'unresolved threads';
    let resolved_key = 'resolved threads';

    var frequencyData = [{name : resolved_key, values : [...resolved_map.entries()].map(function (d) {
            return {date: parseDate.parse(d[0]), count: d[1]}
        })}
        , {name : unresolved_key, values : [...unresolved_map.entries()].map(function (d) {
                return {date: parseDate.parse(d[0]), count: d[1]}
            })}
    ];


    var margin = {top: 10, right: 10, bottom: 20, left: 40},
        width = d3version3.select('.resolved_line_chart').node().clientWidth - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    var x = d3version3.time.scale()
        .range([0, width]);

    var y = d3version3.scale.linear()
        .range([height, 0]);

    var color = d3version3.scale.category10();

    var xAxis = d3version3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3version3.svg.axis()
        .scale(y)
        .orient("left");

    var line = d3version3.svg.line()
        .interpolate("basis")
        .x(function(d) { return x(d.date); })
        .y(function(d) { return y(d.count); });

    var svg = d3version3.select("#resolved_line_chart");
    svg.html("");

    var chart = svg.attr("width", width)
        .attr("height", height)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    
    color.domain(d3version3.keys([unresolved_key, resolved_key]));

    x.domain(d3version3.extent(date_keys, function(d) { return parseDate.parse(d); }));

    y.domain([
        d3version3.min(frequencyData, function(c) { return d3version3.min(c.values, function(v) { return v.count; }); }),
        d3version3.max(frequencyData, function(c) { return d3version3.max(c.values, function(v) { return v.count; }); })
    ]);

    chart.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    chart.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Threads");

    var graph = chart.selectAll(".graph")
        .data(frequencyData)
        .enter().append("g")
        .attr("class", "graph");

    graph.append("path")
        .attr("class", "line")
        .attr("d", function(d) { return line(d.values); })
        .attr("data-legend",function(d) { return d.name})
        .style("stroke", function(d) { return color(d.name); });

    var legend = chart.append("g")
        .attr("class","legend")
        .attr("transform","translate(30,30)")
        .style("font-size","12px")
        .call(d3version3.legend);

    setTimeout(function() {
        legend
            .style("font-size","12px")
            .attr("data-style-padding",5)
            .call(d3version3.legend)
    },1000)

}

// function linechart(data, startDate, endDate) {
//     linechart1(data, startDate, endDate);
// //     startDate = new Date(startDate.toDateString());
// //     endDate = new Date(endDate.toDateString());
// //
// //     d3version4.select("#resolved_line_chart").html("");
// //
// //     let threads = data.filter(row => {
// //         let date = new Date(row.initial_time);
// //         return date >= startDate && date <= endDate;
// //     });
// //
// //     let resolved_map =  threads.filter(row => row.if_resolved === 'y').map(row => new Date(row.initial_time).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
// //     let unresolved_map =  threads.filter(row => row.if_resolved !== 'y').map(row => new Date(row.initial_time).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
// //
// //     let date_keys = [...new Set([...resolved_map.keys() ,...unresolved_map.keys()])];
// //
// //     // set the dimensions and margins of the graph
// //     const margin = 10;
// // // const height = d3version4.select('#scene').node().clientHeight - 2 * margin;
// //     const height = 400 - 2 * margin;
// //     const width = d3version4.select('.resolved_line_chart').node().clientWidth - 2 * margin;
// //
// // // parse the date / time // example date - Tue May 18 2004
// //     var parseTime = d3version4.timeParse("%a %b %d %Y");
// //
// // // set the ranges
// //     var x = d3version4.scaleTime().range([0, width]);
// //     var y = d3version4.scaleLinear().range([height, 0]);
// //
// // // define the 1st line
// //     var valueline = d3version4.line()
// //         .x(function(d) { return x(parseTime(d)); })
// //         .y(function(d) { return y( ); });
// //
// // // define the 2nd line
// //     var valueline2 = d3version4.line()
// //         .x(function(d) { return x(parseTime(d)); })
// //         .y(function(d) { return y(unresolved_map.has(d) ? unresolved_map.get(d): 0 );});
// // // append the svg obgect to the body of the page
// // // appends a 'group' element to 'svg'
// // // moves the 'group' element to the top left margin
// //
// //     var svg = d3version4.select("#resolved_line_chart")
// //         .attr("width", width)
// //         .attr("height", height)
// //         .append("g")
// //         .attr('transform', `translate(${margin}, ${margin})`);
// //
// //
// //         // Scale the range of the data
// //     let extent = d3version4.extent(date_keys, function(d) { return parseTime(d); });
// //     console.log(extent);
// //     x.domain(extent);
// //         y.domain([0, d3version4.max(date_keys, function(d) {
// //             return Math.max(resolved_map.has(d) ? resolved_map.get(d): 0., unresolved_map.has(d) ? unresolved_map.get(d): 0); })]);
// //
// //         // Add the valueline path.
// //         svg.append("path")
// //             .data([date_keys])
// //             .attr("class", "line")
// //             .attr("data-legend",function(d) { return "Asd"})
// //             .attr("d", valueline);
// //
// //         // Add the valueline2 path.
// //         svg.append("path")
// //             .data([date_keys])
// //             .attr("class", "line")
// //             .style("stroke", "red")
// //             .attr("d", valueline2)
// //             .attr("data-legend", function(d) { return "asxs"});
// //
// //
// //     // Add the X Axis
// //         svg.append("g")
// //             .attr("transform", "translate(0," + height + ")")
// //             .call(d3version4.axisBottom(x));
// //
// //         // Add the Y Axis
// //         svg.append("g")
// //             .call(d3version4.axisLeft(y));
//
//
//     // legend = svg.append("g")
//     //     .attr("class","legend")
//     //     .attr("transform","translate(50,30)")
//     //     .style("font-size","12px")
//     //     .call(d3version4.legend)
//
// }