function linechart(data) {

    let tick_count = 50;
    let one_day = 1000 * 3600 * 24;
    let genesis = new Date('1970-01-01');

    startDate = d3version3.min(data.map(row => new Date(row.startDate)));
    endDate = d3version3.max(data.map(row => new Date(row.startDate)));

    let no_of_days = (endDate - startDate) / (one_day);
    let step = Math.ceil(no_of_days / tick_count);

    let finalDates = [genesis];
    let current_date = new Date(startDate);
    while (current_date < endDate) {
        finalDates = finalDates.concat(new Date(current_date));
        current_date.setDate(current_date.getDate() + step)
    }
    finalDates = finalDates.concat(endDate);
    let dateCache = 1;

    function attachDate(date, retry = true) {
        while (finalDates[dateCache]) {
            if (finalDates[dateCache - 1] < date && finalDates[dateCache] >= date) return finalDates[dateCache];
            dateCache ++;
        }
        console.log("unexpected date " + date + "start_date  " + startDate + " end date " + endDate);
        dateCache = 1;
        if(retry) return attachDate(date, false)
    }

    let resolved_map =  data.filter(row => row.resolution_status === 'resolved').map(row => attachDate(new Date(row.startDate)).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());
    let unresolved_map =  data.filter(row => row.resolution_status !== 'resolved').map(row => attachDate(new Date(row.startDate)).toDateString()).reduce((acc, val) => acc.set(val, 1 + (acc.get(val) || 0)), new Map());



    let date_keys = [...new Set([...resolved_map.keys() ,...unresolved_map.keys()])];
    // date_keys.forEach(key => {
    //     if (!resolved_map.has(key)) resolved_map.set(key, 0);
    //     if (!unresolved_map.has(key)) unresolved_map.set(key, 0);
    // });

    var parseDate = d3version3.time.format("%a %b %d %Y");
    let unresolved_key = 'unresolved threads';
    let resolved_key = 'resolved threads';

    var frequencyData = [{name : resolved_key, values : [...resolved_map.entries()].map(function (d) {
            return {date: parseDate.parse(d[0]), count: d[1]}
        })}
        , {name : unresolved_key, values : [...unresolved_map.entries()].map(function (d) {
                return {date: parseDate.parse(d[0]), count: d[1]}
            })}
    ];

    var aspect_ratio = 1;
    var margin = {top: 40, right: 10, bottom: 20, left: 40};
    var width = d3version3.select('.resolved_line_chart').node().clientWidth - margin.left - margin.right;
    var height = (d3version3.select('.resolved_line_chart').node().clientWidth * aspect_ratio) - margin.top - margin.bottom;

    var x = d3version3.time.scale()
        .range([0, width]);

    var y = d3version3.scale.linear()
        .range([height, 0]);

    var color = d3version3.scale.category10();

    var xAxis = d3version3.svg.axis()
        .scale(x)
        .orient("bottom");

    var yAxis = d3version3.svg.axis()
        .scale(y)
        .orient("left");

    var line = d3version3.svg.line()
        .interpolate("basis")
        .x(function(d) { return x(d.date); })
        .y(function(d) { return y(d.count); });

    var svg = d3version3.select("#resolved_line_chart");
    svg.html("");

    var chart = svg
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    const title = chart.append("text")
        .attr("x", (width * 0.66))
        .attr("y", 0 - (margin.top * 0.33))
        .attr("text-anchor", "middle")
        .style("font-size", "16px")
        .style("text-decoration", "strong")
        .text("No of New Threads Created");
    
    color.domain(d3version3.keys([unresolved_key, resolved_key]));

    x.domain(d3version3.extent(date_keys, function(d) { return parseDate.parse(d); }));

    y.domain([
        d3version3.min(frequencyData, function(c) { return d3version3.min(c.values, function(v) { return v.count; }); }),
        d3version3.max(frequencyData, function(c) { return d3version3.max(c.values, function(v) { return v.count; }); })
    ]);

    chart.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    chart.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Threads");

    var graph = chart.selectAll(".graph")
        .data(frequencyData)
        .enter().append("g")
        .attr("class", "graph");

    graph.append("path")
        .attr("class", "line")
        .attr("d", function(d) { return line(d.values); })
        .attr("data-legend",function(d) { return d.name})
        .style("stroke", function(d) { return color(d.name); });

    var legend = chart.append("g")
        .attr("class","legend")
        .attr("transform","translate(30,30)")
        .style("font-size","12px")
        .call(d3version3.legend);

    setTimeout(function() {
        legend
            .style("font-size","12px")
            .attr("data-style-padding",5)
            .call(d3version3.legend)
    },1000)

}