
//var selectData = [];
//d3version3.csv('../../data/data_2015.csv',function (data) {
 function scatter(data) {
// CSV section
    document.querySelector( '#scatter_id' ).innerHTML = '';
    document.querySelector( 'table' ).innerHTML = '';
    var tbl = document.getElementById("t1");
    if(!tbl){
        tbl.innerHTML = '';}
    var parseDate = d3version3.time.format('%Y-%m-%dT%H:%M:%S').parse;
    var outputFormat = d3version3.time.format("%B %d, %Y");
    var resolved_num = 0;
    var unknown_num = 0;
    for (var i = 0; i < data.length; i++){
    var item = data[i];
    if (item["resolution_status"]=="resolved"){
        resolved_num += 1 ;
    }
    else{
        unknown_num += 1;
    }
    }
    console.log(unknown_num,resolved_num);
    var format = d3version3.time.format("%Y-%m-%d");
    //startDate = d3version3.min(data.map(row => new Date(row.startDate)));
    //console.log(startDate);
    //endDate = d3version3.max(data.map(row => new Date(row.startDate)));
    data.forEach(function (d) {
        d.number_replies = +d.number_replies;
        d["startDate"] = new Date(d["startDate"]);
        //d["startDate"] = format.parse(d["startDate"]);
        d["endDate"] = new Date(d["endDate"]);
    });

    var body = d3version3.select("#scatter_id");
    var selectData = [{"text": "number_replies"},
        {"text": "startDate"},
        {"text": "endDate"},
        {"text": "duration"},
        {"text": "resolution_status"}
    ];
    var tbl = default_table();
    // Select X-axis Variable
    var span = body.append('span')
        .text('Select X-Axis variable: ')
    var xInput = body.append('select')
        .attr('id', 'xSelect')
        .on('change', xChange)
        .selectAll('option')
        .data(selectData)
        .enter()
        .append('option')
        .attr('value', function (d) {
            return d.text
        })
        .text(function (d) {
            return d.text;
        })
    body.append('br')

    // Select Y-axis Variable
    var span = body.append('span')
        .text('Select Y-Axis variable: ')
    var yInput = body.append('select')
        .attr('id', 'ySelect')
        .on('change', yChange)
        .selectAll('option')
        .data(selectData)
        .enter()
        .append('option')
        .attr('value', function (d) {
            return d.text
        })
        .text(function (d) {
            return d.text;
        })
    body.append('br')

    // Variables
    var body = d3version3.select("div.scatter")
    var margin = {top: 20, right: 20, bottom: 60, left: 60}
    var h = 550 - margin.top - margin.bottom
    var w = 550 - margin.left - margin.right
    var formatPercent = d3version3.format('.2%')
    // Scales
    var colorScale = d3version3.scale.category20()
    var xScale = d3version3.scale.linear()
        .domain([
            d3version3.min([0, d3version3.min(data, function (d) {
                return d['number_replies']
            })]),
            d3version3.max([0, d3version3.max(data, function (d) {
                return d['number_replies']
            })])
        ])
        .range([0, w])
    console.log(h,w);
    var yScale = d3version3.scale.linear()
        .domain([
            d3version3.min([0, d3version3.min(data, function (d) {
                return d['number_replies']
            })]),
            d3version3.max([0, d3version3.max(data, function (d) {
                return d['number_replies']
            })])
        ])
        .range([h, 0])
    // SVG
    var svg = body.append('svg')
        .attr('height', h + margin.top + margin.bottom)
        .attr('width', w + margin.left + margin.right)
        .append('g')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
    // X-axis
    var xAxis = d3version3.svg.axis()
        .scale(xScale)
        //.tickFormat(formatPercent)
        .ticks(5)
        .orient('bottom')
    // Y-axis
    var yAxis = d3version3.svg.axis()
        .scale(yScale)
        //.tickFormat(formatPercent)
        .ticks(5)
        .orient('left')
    // Circles
    var circles = svg.selectAll('circle')
        .data(data)
        .enter()
        .append('circle')
        .attr('cx', function (d) {
            return xScale(d['number_replies'])
        })
        .attr('cy', function (d) {
            return yScale(d['number_replies'])
        })
        .attr('r', '2')
        .attr('fill-opacity', 0.6)
        //.attr('stroke', 'black')
        //.attr('stroke-width', 1)
        .attr('fill', 'steelblue')
        .on('mouseover', function () {
            d3version3.select(this)
                .transition()
                .duration(500)
                .attr('r', 10)
                .attr('fill', 'red')

        })
        .on('mouseout', function () {
            d3version3.select(this)
                .transition()
                .duration(500)
                .attr('r', 2)
                .attr('fill', 'steelblue')
        })
        .append('title') // Tooltip
        .text(function (d) {
            return 'Start Date: ' + outputFormat(d["startDate"]) +
                '\nEnd Date: ' + outputFormat(d['endDate']) +
                '\nNumber of Posts: ' + d['number_replies'] +
                '\nDuration: ' + d['duration']+
                '\nResolution Status: ' +d['resolution_status']
        })

    // X-axis
    svg.append('g')
        .attr('class', 'axis')
        .attr('id', 'xAxis')
        .attr('transform', 'translate(0,' + h + ')')
        .call(xAxis)
        .append('text') // X-axis Label
        .attr('id', 'xAxisLabel')
        .attr('y', -10)
        .attr('x', w)
        .attr('dy', '.71em')
        .style('text-anchor', 'end')
        .text('number_replies')
    // Y-axis
    svg.append('g')
        .attr('class', 'axis')
        .attr('id', 'yAxis')
        .call(yAxis)
        .append('text') // y-axis Label
        .attr('id', 'yAxisLabel')
        .attr('transform', 'rotate(-90)')
        .attr('x', 0)
        .attr('y', 5)
        .attr('dy', '.71em')
        .style('text-anchor', 'end')
        .text('number_replies')


    function yChange() {
        var value = this.value // get the new y value
        if (value == "startDate" || value == "endDate") {
            //var xMin = d3version3.min(data, function(c) { return d3version3.min(c.values, function(d) { return d[value]; })})
            //  var xMax = d3version3.max(data, function(c) { return d3version3.min(c.values, function(d) { return d[value]; })})
            //console.log(xMin);
            var yScale = d3version3.time.scale() // change the yScale
                .domain(d3version3.extent(data, function (d) {
                    return d[value];
                }))
                .range([470, 0]);
        }
        else if (value == "resolution_status"){
            var yScale = d3version3.scale.ordinal()
        .domain(data.map(function(d) { return d[value]; }))
            .rangePoints([400, 100]);
        }
        else {
            var yScale = d3version3.scale.linear()// change the yScale
                .domain([
                    d3version3.min([0, d3version3.min(data, function (d) {
                        return d[value]
                    })]),
                    d3version3.max([0, d3version3.max(data, function (d) {
                        return d[value]
                    })])
                ])
                .range([470, 0]);
        }
        yAxis.scale(yScale) // change the yScale
        d3version3.select('#yAxis') // redraw the yAxis
            .transition().duration(500)
            .call(yAxis)
        .selectAll("text")
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", ".15em")
        .attr("transform", "rotate(-65)");
        d3version3.select('#yAxisLabel') // change the yAxisLabel
            .text(value)
        d3version3.selectAll('circle') // move the circles
            .transition().duration(500)
            .delay(function (d, i) {
               return i * 0.1
            })
            .attr('cy', function (d) {
                return yScale(d[value])
            })
        generate_table(value);
    }
    var flag=0;
    function xChange(flag) {
        var value = this.value // get the new x value
        if (value == "startDate" || value == "endDate") {
            //var xMin = d3version3.min(data, function(c) { return d3version3.min(c.values, function(d) { return d[value]; })})
            //  var xMax = d3version3.max(data, function(c) { return d3version3.min(c.values, function(d) { return d[value]; })})
            //console.log(xMin);
            var xScale = d3version3.time.scale() // change the xScale
                .domain(d3version3.extent(data, function (d) {
                    return d[value];
                }))
                .range([0, 470]);
        }
        else if (value == "resolution_status"){
            var xScale = d3version3.scale.ordinal()
        .domain(data.map(function(d) { return d[value]; }))
            .rangePoints([100, 400]);
        }

        else {
            var xScale = d3version3.scale.linear() // change the xScale
                .domain([
                    d3version3.min([0, d3version3.min(data, function (d) {
                        return d[value]
                    })]),
                    d3version3.max([0, d3version3.max(data, function (d) {
                        return d[value]
                    })])
                ])
                .range([0, 470]);
        }
        xAxis.scale(xScale) // change the xScale

        d3version3.select('#xAxis') // redraw the xAxis
            .transition().duration(1000)
            .call(xAxis)
            .selectAll("text")
        .style("text-anchor", "end")
        .attr("dx", "-.8em")
        .attr("dy", ".15em")
        .attr("transform", "rotate(-65)");

        d3version3.select('#xAxisLabel') // change the xAxisLabel
            .transition().duration(1000)
            .text(value)
        d3version3.selectAll('circle') // move the circles
            .transition().duration(1000)
            .delay(function (d, i) {
               return i * 0.1
            })
            .attr('cx', function (d) {
                return xScale(d[value])
            });
        generate_table(value);

    }

    // render the table(s)
    // 2 column table

    function generate_table(value) {
        console.log(value);
        var body = document.getElementById("t1");
        var minValue = d3version3.min(data, function (d) {
            return d[value]
        });
        var maxValue = d3version3.max(data, function (d) {
            return d[value]
        });
        var meanValue = d3version3.mean(data, function (d) {
            return d[value]
        });
        var medianValue = d3version3.median(data, function (d) {
            return d[value]
        });


        // creates a <table> element and a <tbody> element
        var tbl = document.createElement("table");
        var tblBody = document.createElement("tbody");

        // creating all cells
        // creates a table row
        if(value == "startDate" || value == "endDate"){
             var row1 = document.createElement("tr");
        var cell1 = document.createElement("td");
        cell1.style.fontWeight = 'bold';
        cell1.style.width = '100px';
        var cellText1 = document.createTextNode("Attribute");
        cell1.appendChild(cellText1);
        // Create a <td> element and a text node, make the text
        // node the contents of the <td>, and put the <td> at
        // the end of the table row
        row1.appendChild(cell1);
        var cell2 = document.createElement("td");
        cell2.style.fontWeight = 'bold';
        cell2.style.width = '150px';
        row1.appendChild(cell2);
        var cellText2 = document.createTextNode("From");
        cell2.appendChild(cellText2);
        row1.appendChild(cell2);
        var cell3 = document.createElement("td");
        cell3.style.fontWeight = 'bold';
        var cellText3 = document.createTextNode("To");
        cell3.appendChild(cellText3);
        cell3.style.width = '150px';
        row1.appendChild(cell3);
        tblBody.appendChild(row1);
        var row2 = document.createElement("tr");
        var cell21 = document.createElement("td");
        var cellText21 = document.createTextNode(value);
        var cell22 = document.createElement("td");
        var cellText22 = document.createTextNode(outputFormat(minValue));
        console.log(outputFormat(minValue));
        var cell23 = document.createElement("td");
        var cellText23 = document.createTextNode(outputFormat(maxValue));
        cell21.appendChild(cellText21);
        cell22.appendChild(cellText22);
        cell23.appendChild(cellText23);
        row2.appendChild(cell21);
        row2.appendChild(cell22);
        row2.appendChild(cell23);
        tblBody.appendChild(row2);
        }
        else if (value == "resolution_status") {
            var row1 = document.createElement("tr");
        var cell1 = document.createElement("td");
        cell1.style.fontWeight = 'bold';
        cell1.style.width = '200px';
        var cellText1 = document.createTextNode("Attribute");
        cell1.appendChild(cellText1);
        // Create a <td> element and a text node, make the text
        // node the contents of the <td>, and put the <td> at
        // the end of the table row
        row1.appendChild(cell1);
        var cell2 = document.createElement("td");
        cell2.style.fontWeight = 'bold';
        cell2.style.width = '100px';
        row1.appendChild(cell2);
          var cellText2 = document.createTextNode("Resolved");
        cell2.appendChild(cellText2);
        row1.appendChild(cell2);
        var cell3 = document.createElement("td");
        cell3.style.fontWeight = 'bold';
        var cellText3 = document.createTextNode("Re%");
        cell3.appendChild(cellText3);
        cell3.style.width = '100px';
        row1.appendChild(cell3);
         var cell4 = document.createElement("td");
        cell4.style.fontWeight = 'bold';
        var cellText4 = document.createTextNode("Unknown");
        cell4.appendChild(cellText4);
        cell4.style.width = '100px';
        row1.appendChild(cell4);
        var cell5 = document.createElement("td");
        cell5.style.fontWeight = 'bold';
        var cellText5 = document.createTextNode("Un%");
        cell5.appendChild(cellText5);
        row1.appendChild(cell5);
         tblBody.appendChild(row1);
        var row2 = document.createElement("tr");
        var cell21 = document.createElement("td");
        var cellText21 = document.createTextNode(value);
        var cell22 = document.createElement("td");
        var cellText22 = document.createTextNode(resolved_num);
        var cell23 = document.createElement("td");
        var cellText23 = document.createTextNode((resolved_num/data.length*100).toFixed(2));
       var cell24 = document.createElement("td");
        var cellText24 = document.createTextNode(unknown_num);
        var cell25 = document.createElement("td");
        var cellText25 = document.createTextNode((unknown_num/data.length*100).toFixed(2));
        cell21.appendChild(cellText21);
        cell22.appendChild(cellText22);
        cell23.appendChild(cellText23);
        cell24.appendChild(cellText24);
        cell25.appendChild(cellText25);
        row2.appendChild(cell21);
        row2.appendChild(cell22);
        row2.appendChild(cell23);
        row2.appendChild(cell24);
        row2.appendChild(cell25);
        tblBody.appendChild(row2);}
        else{

        var row1 = document.createElement("tr");
        var cell1 = document.createElement("td");
        cell1.style.fontWeight = 'bold';
        cell1.style.width = '200px';
        var cellText1 = document.createTextNode("Attribute");
        cell1.appendChild(cellText1);
        // Create a <td> element and a text node, make the text
        // node the contents of the <td>, and put the <td> at
        // the end of the table row
        row1.appendChild(cell1);
        var cell2 = document.createElement("td");
        cell2.style.fontWeight = 'bold';
        cell2.style.width = '100px';
        row1.appendChild(cell2);
        var cellText2 = document.createTextNode("Min");
        cell2.appendChild(cellText2);
        row1.appendChild(cell2);
        var cell3 = document.createElement("td");
        cell3.style.fontWeight = 'bold';
        var cellText3 = document.createTextNode("Max");
        cell3.appendChild(cellText3);
        cell3.style.width = '100px';
        row1.appendChild(cell3);
        var cell4 = document.createElement("td");
        cell4.style.fontWeight = 'bold';
        var cellText4 = document.createTextNode("Mean");
        cell4.appendChild(cellText4);
        cell4.style.width = '100px';
        row1.appendChild(cell4);
        var cell5 = document.createElement("td");
        cell5.style.fontWeight = 'bold';
        var cellText5 = document.createTextNode("Median");
        cell5.appendChild(cellText5);
        row1.appendChild(cell5);
        // add the row to the end of the table body
        tblBody.appendChild(row1);
        var row2 = document.createElement("tr");
        var cell21 = document.createElement("td");
        if(value == "duration"){
            var cellText21 = document.createTextNode(value+"(days)");
        }
        else {
        var cellText21 = document.createTextNode(value);}
        var cell22 = document.createElement("td");
        var cellText22 = document.createTextNode(minValue);
        var cell23 = document.createElement("td");
        var cellText23 = document.createTextNode(maxValue);
        var cell24 = document.createElement("td");
        var cellText24 = document.createTextNode(meanValue.toFixed(2));
        var cell25 = document.createElement("td");
        var cellText25 = document.createTextNode(medianValue);
        cell21.appendChild(cellText21);
        cell22.appendChild(cellText22);
        cell23.appendChild(cellText23);
        cell24.appendChild(cellText24);
        cell25.appendChild(cellText25);
        row2.appendChild(cell21);
        row2.appendChild(cell22);
        row2.appendChild(cell23);
        row2.appendChild(cell24);
        row2.appendChild(cell25);
        tblBody.appendChild(row2);}

    // put the <tbody> in the <table>
    tbl.appendChild(tblBody);
    // appends <table> into <body>
    body.appendChild(tbl);
    // sets the border attribute of tbl to 2;
    tbl.setAttribute("border", "2");
    return tbl;
}

function default_table(){
        var body = document.getElementsByTagName("table")[0];
  var minValue = d3version3.min(data,function (d) { return d['number_replies'] });
  var maxValue = d3version3.max(data,function (d) { return d['number_replies'] });
  var meanValue = d3version3.mean(data,function (d) { return d['number_replies'] });
  var medianValue = d3version3.median(data,function (d) { return d['number_replies'] });
  console.log("HELLO"+minValue);

  // creates a <table> element and a <tbody> element
  var tbl = document.createElement("table");
  var tblBody = document.createElement("tbody");

  // creating all cells
    // creates a table row
    var row1 = document.createElement("tr");
    var cell1 = document.createElement("td");
    cell1.style.fontWeight = 'bold';
    cell1.style.width = '200px';
    var cellText1 = document.createTextNode("Attribute");
    cell1.appendChild(cellText1);
  // Create a <td> element and a text node, make the text
  // node the contents of the <td>, and put the <td> at
  // the end of the table row
    row1.appendChild(cell1);
    var cell2 = document.createElement("td");
    cell2.style.fontWeight = 'bold';
    cell2.style.width = '100px';
    row1.appendChild(cell2);
    var cellText2 = document.createTextNode("Min");
    cell2.appendChild(cellText2);
    row1.appendChild(cell2);
    var cell3 = document.createElement("td");
    cell3.style.fontWeight = 'bold';
    var cellText3 = document.createTextNode("Max");
    cell3.appendChild(cellText3);
    cell3.style.width = '100px';
    row1.appendChild(cell3);
    var cell4 = document.createElement("td");
    cell4.style.fontWeight = 'bold';
    var cellText4 = document.createTextNode("Mean");
    cell4.appendChild(cellText4);
    cell4.style.width = '100px';
    row1.appendChild(cell4);
    var cell5 = document.createElement("td");
    cell5.style.fontWeight = 'bold';
    var cellText5 = document.createTextNode("Median");
    cell5.appendChild(cellText5);
    row1.appendChild(cell5);
    // add the row to the end of the table body
    tblBody.appendChild(row1);
        var row2 = document.createElement("tr");
        var cell21 = document.createElement("td");
        var cellText21 = document.createTextNode("Number of Replies");
        var cell22 = document.createElement("td");
        var cellText22 = document.createTextNode(minValue);
        var cell23 = document.createElement("td");
        var cellText23 = document.createTextNode(maxValue);
        var cell24 = document.createElement("td");
        var cellText24 = document.createTextNode(meanValue.toFixed(2));
        var cell25 = document.createElement("td");
        var cellText25 = document.createTextNode(medianValue);
        cell21.appendChild(cellText21);
        cell22.appendChild(cellText22);
        cell23.appendChild(cellText23);
        cell24.appendChild(cellText24);
        cell25.appendChild(cellText25);
        row2.appendChild(cell21);
        row2.appendChild(cell22);
        row2.appendChild(cell23);
        row2.appendChild(cell24);
        row2.appendChild(cell25);
        tblBody.appendChild(row2);

     // put the <tbody> in the <table>
    tbl.appendChild(tblBody);
  // appends <table> into <body>
  body.appendChild(tbl);
  // sets the border attribute of tbl to 2;
  tbl.setAttribute("border", "2");
  return tbl;
}
}
function removeTable()
    {
        var tbl = document.getElementById("t1");
        if(tbl) tbl.parentNode.removeChild(tbl);
    }

