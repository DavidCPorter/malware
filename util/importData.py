import csv
import sys
import psycopg2

# psycopg2 installation instructions at 
# http://initd.org/psycopg/docs/install.html

host = "localhost"
user = input("Enter Username \n")
database = "malware"
password = input("Enter Password\n")
csv_file_1 = input('Enter csv(Thread_data) File Path\n')
csv_file_2 = input('Enter csv(Virus Matched Group) File Path\n')

malware_lookup = dict()
for line in open(csv_file_2, 'r',  encoding='utf-8-sig').readlines():
    kv = line.strip().replace('\'', '').split(':')
    for y in list(map(lambda x: int(x), kv[1][1:-2].split(','))):
        malware_lookup[y] = str(kv[0])



conn = psycopg2.connect("host=%s dbname=%s user=%s password=%s" % (host, database, user, password))
cur = conn.cursor()
cur.execute("""
CREATE TABLE  IF NOT EXISTS threads(
    id SERIAL PRIMARY KEY,
    title text,
    publish_time TIMESTAMPTZ ,
    last_response_time TIMESTAMPTZ ,
    author text,
    auth_group text,
    content_id integer,
    link text,
    malware text,
    malware_family text,
    resolved_time TIMESTAMPTZ 
)
""")

cur.execute("""
CREATE TABLE  IF NOT EXISTS contents(
    id SERIAL PRIMARY KEY,
    thread_id integer,
    post_id integer, 
    content text
)
""")


cur.execute("""
CREATE TABLE IF NOT EXISTS posts(
    id SERIAL PRIMARY KEY,
    thread_id integer ,
    publish_time TIMESTAMPTZ,
    author text,
    auth_group text,
    content_id integer
)
""")
csv.field_size_limit(sys.maxsize)
f = open('%s' % csv_file_1, 'r')
reader = csv.reader(f)
next(reader)
thread_ids = set()
content_id =  0
post_id =  1
for row in reader:
    content_id += 1
    row = list(row)
    row.remove(row[5])
    content = row[5]
    malware = "null"
    malware_family = "null"
    if int(row[0]) in malware_lookup.keys():
        malware = malware_lookup[int(row[0])]
        if '.' in malware:
            malware_family = malware[:malware.rfind('.')]
    row.append(malware)
    row.append(malware_family)

    row[5] = content_id
    if row[0] not in thread_ids:
        cur.execute(
            "INSERT INTO threads VALUES (%s, %s, %s, null, %s, %s, %s, %s, %s, %s, null)",
            row
        )
        cur.execute(
            "INSERT INTO contents VALUES (%s, %s, null, %s)", [content_id, row[0], content]
        )
        thread_ids.add(row[0])
    else:
        cur.execute(
            "INSERT INTO posts VALUES (%s, %s, %s, %s, %s, %s)",
            [post_id, row[0], row[2], row[3], row[4], row[5]]
        )
        cur.execute(
            "INSERT INTO contents VALUES (%s, null, %s, %s)", [content_id, post_id, content]
        )
        post_id += 1

cur.execute("""

    select setval(pg_get_serial_sequence('posts', 'id'), 
                  (select max(id) from posts) 
          );
    select setval(pg_get_serial_sequence('threads', 'id'), 
                  (select max(id) from threads) 
          );
    select setval(pg_get_serial_sequence('contents', 'id'), 
                  (select max(id) from contents) 
          );
""")

conn.commit()

