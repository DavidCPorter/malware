import psycopg2
from config import config
import logging
import json

logger = logging.getLogger()

def create_tables():
    """ create tables in the PostgreSQL database"""
    command =  (
        """ CREATE TABLE all_threads (
        id serial PRIMARY KEY,
        thread_id integer NOT NULL,
        title text,
        publish_time timestamp with time zone,
        author text,
        auth_group text,
        post_id integer, 
        body text,
        link text     
)""")

    conn = None
    try:
        # read the connection parameters
        params = config()
        conn = psycopg2.connect(**params)
        # connect to the PostgreSQL server

        #conn = psycopg2.connect(database='malware', user='***', password='***', host='***', port='5432',
        #                        sslmode='require')
        cur = conn.cursor()
        # create table one by one
        cur.execute(command)
        # close communication with the PostgreSQL database server
        cur.close()
        # commit the changes
        conn.commit()
    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()

# import json file to all_threads table
def load_data():
    post_list = []
    i = 0
    with open("/Users/linangelcat/PycharmProjects/crawler/threadData/comments.json", 'r', encoding="utf8") as f:
        for line in f:
            post = json.loads(line)
            post["thread_id"] = int(post["thread_id"])
            post_list.append(post)
            i += 1
            print(i)
    import_data(post_list)


def import_data(post_list):
    conn = None
    try:
        # read the connection parameters
        params = config()
        conn = psycopg2.connect(**params)
        # connect to the PostgreSQL server
        cur = conn.cursor()
        command = "INSERT into all_threads(id, thread_id,title, publish_time, author, auth_group, post_id, body, link) " \
                  "VALUES (DEFAULT, %s,%s, %s, %s, %s, %s,%s, %s)"
        j = 0
        for post in post_list:
            #print(list(post.values()))
            #cur.execute("select * from posts")
            cur.execute(command, list(post.values()))
            j += 1
            print(j)
        cur.close()
        # commit the changes
        conn.commit()

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)
    finally:
        if conn is not None:
            conn.close()


if __name__ == '__main__':
    #create_tables()
    #load_data()
